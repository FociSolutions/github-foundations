name: Package Audit Logs

on:
    schedule:
        - cron: "30 3 * * *"
    workflow_dispatch:

env:
    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
    find-orgs:
        runs-on: ubuntu-latest
        outputs:
            orgs: ${{ steps.find-orgs-step.outputs.orgs }}
        steps:
            - name: Checkout the GitHub Foundations repository
              uses: actions/checkout@v4

            - name: Get the Go CLI
              run: |
                curl -OL https://github.com/FociSolutions/github-foundations-cli/releases/latest/download/github-foundations-cli_Linux_x86_64.tar.gz
                tar -xzf github-foundations-cli_Linux_x86_64.tar.gz

            - name: Find Orgs
              id: find-orgs-step
              run: |
                orgs=$(echo $(./github-foundations-cli list orgs ${{ github.workspace }}/providers))
                echo -e "Found orgs: $orgs"
                echo "orgs=$(echo -e "${orgs}" | sed s/\'/\"/g)" >> $GITHUB_OUTPUT

    package-audit-logs:
        runs-on: ubuntu-latest
        needs: find-orgs
        permissions:
            actions: read
            contents: write
            id-token: write

        strategy:
            matrix:
                org: ${{ fromJson(needs.find-orgs.outputs.orgs) }}
        steps:
            - name: Checkout the GitHub Foundations repository
              uses: actions/checkout@v4

            - name: Get the GitHub token
              id: generate_token
              uses: FociSolutions/github-foundations/organizations/.github/actions/get-gh-token@main
              with:
                  secret_store: 'gcp'
                  repo_name: "${{ matrix.org }}/"
                  gcp_service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
                  workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}

            - name: Download Audit Logs
              id: download-audit-logs
              uses: actions/github-script@v7
              with:
                script: |
                  async function getPaginatedData(resourcePath) {
                    const nextPattern = /(?<=<)([\S]*)(?=>; rel="Next")/i;
                    let pagesRemaining = true;
                    let data = [];

                    const headers = new Headers();
                    // Add a few headers
                    headers.set("Authorization", "Bearer ${{ steps.generate_token.outputs.token }}");

                    while (pagesRemaining) {
                      const url = `https://api.github.com/${resourcePath}&per_page:1000`;
                      const request = new Request(url, {
                        method: "GET",
                        headers: headers,
                      });
                      console.log(`Fetching ${url}`);

                      data = await fetch(request).then(async (response) => {
                        try {
                          const json = await response.json();
                          const parsedData = parseData(json);
                          console.log(`Fetched ${parsedData?.length} items`);
                          data = [...data, ...parsedData];

                          const linkHeader = response.headers.link;

                          pagesRemaining = linkHeader && linkHeader.includes(`rel=\"next\"`);

                          if (pagesRemaining) {
                            resourcePath = linkHeader.match(nextPattern)[0];
                          }
                        } catch (error) {
                          console.log(error);
                        }
                        return data;
                      });
                    }

                    return data;
                  }

                  function parseData(data) {
                    // If the data is an array, return that
                    if (Array.isArray(data)) {
                      return data;
                    }

                    // Some endpoints respond with 204 No Content instead of empty array
                    //   when there is no data. In that case, return an empty array.
                    if (!data) {
                      return [];
                    }

                    // Otherwise, the array of items that we want is in an object
                    // Delete keys that don't include the array of items
                    delete data.incomplete_results;
                    delete data.repository_selection;
                    delete data.total_count;
                    // Pull out the array of items
                    const namespaceKey = Object.keys(data)[0];
                    data = data[namespaceKey];

                    return data;
                  }

                  async function main(date) {

                      data = await getPaginatedData(
                      `orgs/${{ matrix.org }}/audit-log?phrase=created:${date}`
                      );

                      return data;
                  }

                  const yesterday = new Date(new Date().setDate(new Date().getDate() - 1))
                  .toISOString()
                  .split("T")[0];
                  const outputFilename = `audit-log-${yesterday}.json`;

                  main(yesterday).then((data) => {
                      const fs = require("fs");
                      fs.writeFileSync(outputFilename, JSON.stringify(data));
                  })

                  return outputFilename;

            - name: Package Audit Logs
              uses: actions/upload-artifact@v4
              with:
                  name: ${{ matrix.org }}-${{ fromJson(steps.download-audit-logs.outputs.result) }}
                  path: ${{ github.WORKSPACE }}/${{  fromJson(steps.download-audit-logs.outputs.result) }}
