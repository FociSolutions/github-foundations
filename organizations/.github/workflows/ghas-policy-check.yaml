name: "GitHub Advanced Security (GHAS) checks"

on:
    schedule:
        - cron: '0 2 * * *'
    workflow_dispatch:

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
    find-applicable-repos:
        runs-on: ubuntu-latest
        outputs:
          repos: ${{ steps.repo_list.outputs.repos }}

        steps:
            - name: Install HCL python library
              run: pip install python-hcl2

            - name: Checkout the GitHub Foundations repository
              uses: actions/checkout@v4

            - name: Create a python script to parse terragrunt.hcl files
              run: |
                cat << 'EOF' > parse_terragrunt_hcl.py
                import os
                import hcl2

                def parse_terragrunt_hcl_files(root_dir='./projects'):
                    hcl_files = {}

                    for root, _, files in os.walk(root_dir):
                        for file in files:
                            # ignore file in the .terragrunt-cache directory
                            if '.terragrunt-cache' in root:
                                continue

                            dirs = root.split('/')
                            if(len(dirs) < 2):
                                continue
                            if file.endswith('terragrunt.hcl'):
                                # Add a key/value pair of org name / path to the hcl file
                                # The key is the name of the 3rd dir from the root
                                org_name = dirs[3]
                                if org_name not in hcl_files:
                                    hcl_files[org_name] = []
                                hcl_files[org_name].append(os.path.join(root, file))
                    return hcl_files

                def find_repos_in_terragrunt_hcl_files():
                    hcl_files = parse_terragrunt_hcl_files()
                    repos = {}
                    repos['public'] = []
                    repos['private'] = []
                    for org in hcl_files:
                        for file in hcl_files[org]:
                            with open(file, 'r') as f:
                                data = hcl2.load(f)
                                if 'inputs' in data:
                                    if 'public_repositories' in data['inputs']:
                                        for repo_name, repo_details in data['inputs']['public_repositories'].items():
                                                repos['public'].append({
                                                     'org': org,
                                                     'name': repo_name,
                                                    })
                                    if 'private_repositories' in data['inputs']:
                                        # iterate over private repos and add them to the list, along
                                        # with the value of the `advance_security` key
                                        for repo_name, repo_details in data['inputs']['private_repositories'].items():
                                            advance_security = repo_details.get('advance_security', False)  # Handle missing key with default
                                            repos['private'].append({
                                                'org': org,
                                                'name': repo_name,
                                                'advance_security': advance_security
                                            })
                    return filter_repos_without_ghas_enabled(repos)

                def filter_repos_without_ghas_enabled(repos):
                    repos_with_ghas = []
                    # append all public repos, since they are enabled by default
                    for repo in repos['public']:
                        repos_with_ghas.append(f"{repo['org']}/{repo['name']}")

                    for repo in repos['private']:
                        if repo['advance_security'] == True:
                            repos_with_ghas.append(f"{repo['org']}/{repo['name']}")
                    return repos_with_ghas

                if __name__ == '__main__':
                    print(find_repos_in_terragrunt_hcl_files())
                EOF

            - name: Run the python script to parse terragrunt.hcl files
              id: repo_list
              run: |
                repos=$(python parse_terragrunt_hcl.py)
                echo -e "Found repos: $repos"
                echo "repos=$(echo -e "${repos}" | sed s/\'/\"/g)" >> $GITHUB_OUTPUT

    generate_token:
        runs-on: ubuntu-latest
        needs: find-applicable-repos
        permissions:
            actions: read
            contents: read
            id-token: write
        strategy:
            matrix:
                repo: ${{ fromJson(needs.find-applicable-repos.outputs.repos) }}
        steps:
            - name: Checkout the repo
              uses: actions/checkout@v4
              with:
                ref: ${{ github.head_ref }}

            - name: Get the GitHub token
              id: generate_token
              uses: FociSolutions/github-foundations/organizations/.github/actions/get-gh-token-gcp@main
              with:
                  repo_name: ${{ matrix.repo }}
                  gcp_service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
                  workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}

            - name: For each repo, run the policy checks
              uses: advanced-security/policy-as-code@v2.7.2
              #   env:
              #     DEBUG: true
              with:
                repository: ${{ matrix.repo }}
                ref: refs/heads/main
                policy-branch: main
                token: ${{ steps.generate_token.outputs.token }}
                action: continue
