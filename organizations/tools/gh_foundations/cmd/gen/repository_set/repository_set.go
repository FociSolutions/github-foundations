package repositoryset

import (
	"log"
	"os"

	"github.com/hashicorp/hcl/v2/hclwrite"
	"github.com/spf13/cobra"
	"github.com/tidwall/gjson"

	"gh_foundations/internal/pkg/functions"
	githubfoundations "gh_foundations/internal/pkg/types/github_foundations"
)

var GenRepositorySetCmd = &cobra.Command{
	Use:   "repository_set",
	Short: "Use the results from a terraformer run to generate an hcl file that contains a repository set input.",
	Long:  `Uses the results from a terraformer run to generate an hcl file that contains a repository set input. It generates inputs for all repositories in the state file generated by terraformer.`,
	Args: func(cmd *cobra.Command, args []string) error {
		if err := cobra.MinimumNArgs(1)(cmd, args); err != nil {
			return err
		}
		if _, err := os.Stat(args[0]); err != nil {
			return err
		}
		return nil
	},
	Run: func(cmd *cobra.Command, args []string) {
		stateFile := args[0]
		stateBytes, err := os.ReadFile(stateFile)
		if err != nil {
			log.Fatalf("Error reading state file %s. %s", stateFile, err.Error())
		}
		result := gjson.Parse(string(stateBytes))

		list := result.Get("modules.0.resources").Map()
		repositorySet := new(githubfoundations.RepositorySetInput)
		repositoryUserPermissions := make(map[string]map[string]string)
		for resource_id, gjsonResult := range list {
			rType := functions.IdentifyFoundationsResourceType(resource_id)
			rAttributes := gjsonResult.Get("primary.attributes")
			if rType == githubfoundations.Repository {
				repository := functions.MapTerraformerRepositoryToGithubFoundationRepository(rAttributes)
				visibility := rAttributes.Get("visibility").String()
				if visibility == "public" {
					repositorySet.PublicRepositories = append(repositorySet.PublicRepositories, repository)
				} else {
					repositorySet.PrivateRepositories = append(repositorySet.PrivateRepositories, repository)
				}
			} else if rType == githubfoundations.RepositoryCollaborator {
				repositoryName := rAttributes.Get("repository").String()
				permission := rAttributes.Get("permission").String()
				username := rAttributes.Get("username").String()
				userPermission, ok := repositoryUserPermissions[repositoryName]
				if !ok {
					userPermission = make(map[string]string)
				}
				userPermission[username] = permission
				repositoryUserPermissions[repositoryName] = userPermission
			}
		}

		for _, repository := range repositorySet.PrivateRepositories {
			repository.UserPermissions = repositoryUserPermissions[repository.Name]
		}
		for _, repository := range repositorySet.PublicRepositories {
			repository.UserPermissions = repositoryUserPermissions[repository.Name]
		}

		file := hclwrite.NewEmptyFile()
		repositorySet.WriteInputsHCL(file)
		output, err := os.Create("repository_set.inputs.hcl")
		if err != nil {
			log.Fatal(err)
		}
		file.WriteTo(output)
	},
}
