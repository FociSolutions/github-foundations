// Code generated by mockery v2.42.3. DO NOT EDIT.

package mocks

import (
	terraform_state "gh_foundations/internal/pkg/types/terraform_state"

	mock "github.com/stretchr/testify/mock"
)

// MockIPlanFile is an autogenerated mock type for the IPlanFile type
type MockIPlanFile struct {
	mock.Mock
}

type MockIPlanFile_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIPlanFile) EXPECT() *MockIPlanFile_Expecter {
	return &MockIPlanFile_Expecter{mock: &_m.Mock}
}

// Cleanup provides a mock function with given fields:
func (_m *MockIPlanFile) Cleanup() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Cleanup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIPlanFile_Cleanup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Cleanup'
type MockIPlanFile_Cleanup_Call struct {
	*mock.Call
}

// Cleanup is a helper method to define mock.On call
func (_e *MockIPlanFile_Expecter) Cleanup() *MockIPlanFile_Cleanup_Call {
	return &MockIPlanFile_Cleanup_Call{Call: _e.mock.On("Cleanup")}
}

func (_c *MockIPlanFile_Cleanup_Call) Run(run func()) *MockIPlanFile_Cleanup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIPlanFile_Cleanup_Call) Return(_a0 error) *MockIPlanFile_Cleanup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIPlanFile_Cleanup_Call) RunAndReturn(run func() error) *MockIPlanFile_Cleanup_Call {
	_c.Call.Return(run)
	return _c
}

// GetPlanFilePath provides a mock function with given fields:
func (_m *MockIPlanFile) GetPlanFilePath() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPlanFilePath")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockIPlanFile_GetPlanFilePath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPlanFilePath'
type MockIPlanFile_GetPlanFilePath_Call struct {
	*mock.Call
}

// GetPlanFilePath is a helper method to define mock.On call
func (_e *MockIPlanFile_Expecter) GetPlanFilePath() *MockIPlanFile_GetPlanFilePath_Call {
	return &MockIPlanFile_GetPlanFilePath_Call{Call: _e.mock.On("GetPlanFilePath")}
}

func (_c *MockIPlanFile_GetPlanFilePath_Call) Run(run func()) *MockIPlanFile_GetPlanFilePath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIPlanFile_GetPlanFilePath_Call) Return(_a0 string) *MockIPlanFile_GetPlanFilePath_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIPlanFile_GetPlanFilePath_Call) RunAndReturn(run func() string) *MockIPlanFile_GetPlanFilePath_Call {
	_c.Call.Return(run)
	return _c
}

// GetStateExplorer provides a mock function with given fields:
func (_m *MockIPlanFile) GetStateExplorer() (terraform_state.IStateExplorer, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetStateExplorer")
	}

	var r0 terraform_state.IStateExplorer
	var r1 error
	if rf, ok := ret.Get(0).(func() (terraform_state.IStateExplorer, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() terraform_state.IStateExplorer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(terraform_state.IStateExplorer)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIPlanFile_GetStateExplorer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStateExplorer'
type MockIPlanFile_GetStateExplorer_Call struct {
	*mock.Call
}

// GetStateExplorer is a helper method to define mock.On call
func (_e *MockIPlanFile_Expecter) GetStateExplorer() *MockIPlanFile_GetStateExplorer_Call {
	return &MockIPlanFile_GetStateExplorer_Call{Call: _e.mock.On("GetStateExplorer")}
}

func (_c *MockIPlanFile_GetStateExplorer_Call) Run(run func()) *MockIPlanFile_GetStateExplorer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIPlanFile_GetStateExplorer_Call) Return(_a0 terraform_state.IStateExplorer, _a1 error) *MockIPlanFile_GetStateExplorer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIPlanFile_GetStateExplorer_Call) RunAndReturn(run func() (terraform_state.IStateExplorer, error)) *MockIPlanFile_GetStateExplorer_Call {
	_c.Call.Return(run)
	return _c
}

// RunPlan provides a mock function with given fields: target
func (_m *MockIPlanFile) RunPlan(target *string) error {
	ret := _m.Called(target)

	if len(ret) == 0 {
		panic("no return value specified for RunPlan")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*string) error); ok {
		r0 = rf(target)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIPlanFile_RunPlan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunPlan'
type MockIPlanFile_RunPlan_Call struct {
	*mock.Call
}

// RunPlan is a helper method to define mock.On call
//   - target *string
func (_e *MockIPlanFile_Expecter) RunPlan(target interface{}) *MockIPlanFile_RunPlan_Call {
	return &MockIPlanFile_RunPlan_Call{Call: _e.mock.On("RunPlan", target)}
}

func (_c *MockIPlanFile_RunPlan_Call) Run(run func(target *string)) *MockIPlanFile_RunPlan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*string))
	})
	return _c
}

func (_c *MockIPlanFile_RunPlan_Call) Return(_a0 error) *MockIPlanFile_RunPlan_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIPlanFile_RunPlan_Call) RunAndReturn(run func(*string) error) *MockIPlanFile_RunPlan_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIPlanFile creates a new instance of MockIPlanFile. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIPlanFile(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIPlanFile {
	mock := &MockIPlanFile{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
