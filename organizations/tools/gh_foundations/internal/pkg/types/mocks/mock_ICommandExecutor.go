// Code generated by mockery v2.42.3. DO NOT EDIT.

package mocks

import (
	io "io"

	mock "github.com/stretchr/testify/mock"
)

// MockICommandExecutor is an autogenerated mock type for the ICommandExecutor type
type MockICommandExecutor struct {
	mock.Mock
}

type MockICommandExecutor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockICommandExecutor) EXPECT() *MockICommandExecutor_Expecter {
	return &MockICommandExecutor_Expecter{mock: &_m.Mock}
}

// Run provides a mock function with given fields:
func (_m *MockICommandExecutor) Run() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockICommandExecutor_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type MockICommandExecutor_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
func (_e *MockICommandExecutor_Expecter) Run() *MockICommandExecutor_Run_Call {
	return &MockICommandExecutor_Run_Call{Call: _e.mock.On("Run")}
}

func (_c *MockICommandExecutor_Run_Call) Run(run func()) *MockICommandExecutor_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockICommandExecutor_Run_Call) Return(_a0 error) *MockICommandExecutor_Run_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockICommandExecutor_Run_Call) RunAndReturn(run func() error) *MockICommandExecutor_Run_Call {
	_c.Call.Return(run)
	return _c
}

// SetDir provides a mock function with given fields: _a0
func (_m *MockICommandExecutor) SetDir(_a0 string) {
	_m.Called(_a0)
}

// MockICommandExecutor_SetDir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDir'
type MockICommandExecutor_SetDir_Call struct {
	*mock.Call
}

// SetDir is a helper method to define mock.On call
//   - _a0 string
func (_e *MockICommandExecutor_Expecter) SetDir(_a0 interface{}) *MockICommandExecutor_SetDir_Call {
	return &MockICommandExecutor_SetDir_Call{Call: _e.mock.On("SetDir", _a0)}
}

func (_c *MockICommandExecutor_SetDir_Call) Run(run func(_a0 string)) *MockICommandExecutor_SetDir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockICommandExecutor_SetDir_Call) Return() *MockICommandExecutor_SetDir_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockICommandExecutor_SetDir_Call) RunAndReturn(run func(string)) *MockICommandExecutor_SetDir_Call {
	_c.Call.Return(run)
	return _c
}

// SetErrorOutput provides a mock function with given fields: _a0
func (_m *MockICommandExecutor) SetErrorOutput(_a0 io.Writer) {
	_m.Called(_a0)
}

// MockICommandExecutor_SetErrorOutput_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetErrorOutput'
type MockICommandExecutor_SetErrorOutput_Call struct {
	*mock.Call
}

// SetErrorOutput is a helper method to define mock.On call
//   - _a0 io.Writer
func (_e *MockICommandExecutor_Expecter) SetErrorOutput(_a0 interface{}) *MockICommandExecutor_SetErrorOutput_Call {
	return &MockICommandExecutor_SetErrorOutput_Call{Call: _e.mock.On("SetErrorOutput", _a0)}
}

func (_c *MockICommandExecutor_SetErrorOutput_Call) Run(run func(_a0 io.Writer)) *MockICommandExecutor_SetErrorOutput_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(io.Writer))
	})
	return _c
}

func (_c *MockICommandExecutor_SetErrorOutput_Call) Return() *MockICommandExecutor_SetErrorOutput_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockICommandExecutor_SetErrorOutput_Call) RunAndReturn(run func(io.Writer)) *MockICommandExecutor_SetErrorOutput_Call {
	_c.Call.Return(run)
	return _c
}

// SetOutput provides a mock function with given fields: _a0
func (_m *MockICommandExecutor) SetOutput(_a0 io.Writer) {
	_m.Called(_a0)
}

// MockICommandExecutor_SetOutput_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetOutput'
type MockICommandExecutor_SetOutput_Call struct {
	*mock.Call
}

// SetOutput is a helper method to define mock.On call
//   - _a0 io.Writer
func (_e *MockICommandExecutor_Expecter) SetOutput(_a0 interface{}) *MockICommandExecutor_SetOutput_Call {
	return &MockICommandExecutor_SetOutput_Call{Call: _e.mock.On("SetOutput", _a0)}
}

func (_c *MockICommandExecutor_SetOutput_Call) Run(run func(_a0 io.Writer)) *MockICommandExecutor_SetOutput_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(io.Writer))
	})
	return _c
}

func (_c *MockICommandExecutor_SetOutput_Call) Return() *MockICommandExecutor_SetOutput_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockICommandExecutor_SetOutput_Call) RunAndReturn(run func(io.Writer)) *MockICommandExecutor_SetOutput_Call {
	_c.Call.Return(run)
	return _c
}

// String provides a mock function with given fields:
func (_m *MockICommandExecutor) String() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockICommandExecutor_String_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'String'
type MockICommandExecutor_String_Call struct {
	*mock.Call
}

// String is a helper method to define mock.On call
func (_e *MockICommandExecutor_Expecter) String() *MockICommandExecutor_String_Call {
	return &MockICommandExecutor_String_Call{Call: _e.mock.On("String")}
}

func (_c *MockICommandExecutor_String_Call) Run(run func()) *MockICommandExecutor_String_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockICommandExecutor_String_Call) Return(_a0 string) *MockICommandExecutor_String_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockICommandExecutor_String_Call) RunAndReturn(run func() string) *MockICommandExecutor_String_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockICommandExecutor creates a new instance of MockICommandExecutor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockICommandExecutor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockICommandExecutor {
	mock := &MockICommandExecutor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
